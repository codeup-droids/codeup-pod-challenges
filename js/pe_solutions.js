//useful functions

function isEven(num) {
	if (isNaN(num)) {
		return console.error("this num isNaN");
	}
	if (num % 2 === 0) {
		return true;
	}
	return false;
}

function isOdd(num) {
	if (isNaN(num)) {
		return console.error("this num isNaN");
	}
	if (num % 2 !== 0) {
		return true;
	}
	return false;
}

function isPrime(num) {
	for (let i =2; i < num ; i ++){
		if(num % i===0){
			console.log((num + " is not Prime"));
			return false;
		}
	}
	console.log((num + " is prime"));
	return true;
}


/*
Multiples of 3 and 5

Problem 1
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.

source https://projecteuler.net/problem=1
*/

//function that takes a number
//the number has to be positive and grater than 0
//the function will count all the numbers between 1 and the given number
// the numbers that are multiples of 3 or 5 will be added together.

function multiplesOf3sAnd5s(num) {
	let x = 0;
	if (num <= 0) {
		return alert(num + " is not a valid number. Please enter an integer greater than 0");
	}

	for (let i = 1; i < num; i++) {
		if ((i % 3 === 0) || (i % 5 === 0)) {
			//console.log(("adding " + x + " and " + i));
			x += i;
			//console.log(("result " + x));;
		}
	}
	return x;
}

/*
* Even Fibonacci numbers

Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

source https://projecteuler.net/problem=2

Answer:
4613732

*/


// takes in a number
function evenFibonacciSum(num) {
// first lets create the sequence variables;
	let fibSeq = [];
	let a = 1;
	let b = 1;
	let c = 0;
	let sum = 0;
	// then we do the things
	for (let i = 1; i < num; i++) {
		c = a + b;
		if (isEven(c)) {
			sum += c;
			if (sum >= 4000000) {
				return sum;
			}
		}
		a = b;
		b = c;
	}
	//fibSeq.forEach(function (item) {
	//	c+= item
	//});
	return sum;
}

/*
Largest prime factor

Problem 3
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?


Answer:
6857

*/

var primesList = [];
function largestPrimeFactor(num) {
	let newNum = Math.sqrt(num);
	let factors = [];
	for (let i = 2; i < newNum; i++) {
		if ((num % i ===0) && (isPrime(i))){
			console.log(i + " is a factor of " + num);
			factors.push(i);
		}
	}

	/*for (let i = 2;i < newNum;i++){
		if ((i % num === 0)&& isPrime(i)){
			console.log(("Adding " + i + " to the prime list"));
			primesList.push(i);
		}

	}*/
	//console.log(primesList.pop());
	console.log(factors);

}

/*
Largest palindrome product

Problem 4
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

Find the largest palindrome made from the product of two 3-digit numbers.


Answer:
906609
*/

var palVar = [];
function palNum(num) {
	let a = 99;
	let b = 99;
	for (a= 100; a>40:a--){

		for (b=100;b>40;b--) {

		}


	}

}
